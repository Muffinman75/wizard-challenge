{"version":3,"sources":["components/Step1.js","components/Step2.js","components/MainForm.js","App.js","serviceWorker.js","index.js"],"names":["Step1","this","props","currentStep","react_default","a","createElement","className","htmlFor","id","name","type","placeholder","value","title","onChange","handleChange","required","dateOfBirth","React","Component","Step2","location","dateTime","feedback","MainForm","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","notify","toast","success","nowDateTime","state","today","Date","date","getDate","getMonth","getFullYear","minutes","getMinutes","getHours","setState","next","event","_event$target","target","defineProperty","handleSubmit","preventDefault","_this$state","reqBody","fetch","method","body","JSON","stringify","headers","Content-Type","then","res","ok","json","Error","handleReset","_next","bind","assertThisInitialized","_prev","Fragment","onClick","prev","ref","step","components_Step1","components_Step2","previousButton","nextButton","lib","position","App","react_router_dom","components_MainForm","react_router","exact","path","component","Boolean","window","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0ae991ba.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../css/styles.scss\";\n\nclass Step1 extends React.Component {\n  render() {\n    if (this.props.currentStep !== 1) {\n      // Determines which step to render\n      return null;\n    }\n    // The markup for Step 1\n    return (\n      <div className=\"form-group\">\n        <label className=\"form-label\" htmlFor=\"title\">\n          Title :\n        </label>\n        <input\n          className=\"form-control\"\n          id=\"title\"\n          name=\"title\"\n          type=\"text\"\n          placeholder=\"Enter title\"\n          value={this.props.title} // Prop from parent component\n          onChange={this.props.handleChange} // Prop from parent component\n          required\n        />\n        <label className=\"form-label\" htmlFor=\"name\">\n          Name :\n        </label>\n        <input\n          className=\"form-control\"\n          id=\"name\"\n          name=\"name\"\n          type=\"text\"\n          placeholder=\"Enter name\"\n          value={this.props.name}\n          onChange={this.props.handleChange}\n          required\n        />\n        <label className=\"form-label\" htmlFor=\"dateOfBirth\">\n          Date of birth :\n        </label>\n        <input\n          className=\"form-control\"\n          id=\"dateOfBirth\"\n          name=\"dateOfBirth\"\n          type=\"date\"\n          placeholder=\"Enter date of birth\"\n          value={this.props.dateOfBirth}\n          onChange={this.props.handleChange}\n          required\n        />\n      </div>\n    );\n  }\n}\n\nexport default Step1;\n","import React from \"react\";\nimport \"../css/styles.scss\";\n\nclass Step2 extends React.Component {\n  render() {\n    if (this.props.currentStep !== 2) {\n      // Determines which step to render\n      return null;\n    }\n    // The markup for Step 1\n    return (\n      <div className=\"form-group\">\n        <label className=\"form-label\" htmlFor=\"location\">\n          Location :\n        </label>\n        <input\n          className=\"form-control\"\n          id=\"location\"\n          name=\"location\"\n          type=\"text\"\n          placeholder=\"Enter location\"\n          value={this.props.location} // Prop from parent component\n          onChange={this.props.handleChange} // Prop from parent component\n          required\n        />\n        <label className=\"form-label\" htmlFor=\"dateTime\">\n          Today's Date / Time :\n        </label>\n        <input\n          className=\"form-control\"\n          id=\"dateTime\"\n          name=\"dateTime\"\n          type=\"dateTime\"\n          value={this.props.dateTime}\n          onChange={this.props.handleChange}\n          required\n        />\n        <label className=\"form-label\" htmlFor=\"feedback\">\n          User Feedback :\n        </label>\n        <textarea\n          className=\"form-control\"\n          id=\"feedback\"\n          name=\"feedback\"\n          type=\"text\"\n          placeholder=\"Enter feedback\"\n          value={this.props.feedback}\n          onChange={this.props.handleChange}\n          required\n        />\n      </div>\n    );\n  }\n}\n\nexport default Step2;\n","import React, { Component } from \"react\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\n// Import steps 1 & 2 to be the children of MainForm\nimport Step1 from \"./Step1\";\nimport Step2 from \"./Step2\";\n\nimport \"../css/styles.scss\";\n\nclass MainForm extends Component {\n  constructor(props) {\n    // Initialize state for this component here\n    super(props);\n    this.state = {\n      currentStep: 1,\n      title: \"\",\n      name: \"\",\n      dateOfBirth: \"\",\n      location: \"\",\n      dateTime: \"\",\n      feedback: \"\"\n    };\n    this._next = this._next.bind(this); // Function bindings for each instance of the function\n    this._prev = this._prev.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.nowDateTime = this.nowDateTime.bind(this);\n    this.notify = this.notify.bind(this);\n  }\n\n  notify = () => toast.success(\"Details Received! Thanks!\"); // Thank you message for the ToastContainer\n\n  nowDateTime = () => {\n    // Function to get current time and date and\n    let dateTime = this.state.dateTime; // set it to state\n    let today = new Date();\n    let date =\n      today.getDate() +\n      \"-\" +\n      (today.getMonth() + 1) +\n      \"-\" +\n      today.getFullYear();\n    let minutes = (today.getMinutes() < 10 ? \"0\" : \"\") + today.getMinutes();\n    let time = today.getHours() + \":\" + minutes;\n    dateTime = date + \" / \" + time;\n    this.setState({\n      dateTime: dateTime\n    });\n  };\n\n  next = () => {\n    // Function invoked on 'next' button clicked, increments currentStep in state\n    this.nowDateTime();\n    let currentStep = this.state.currentStep;\n    currentStep = currentStep >= 1 ? 2 : currentStep + 1;\n    this.setState({\n      currentStep: currentStep\n    });\n  };\n\n  prev() {\n    // Function invoked on 'previous' button clicked, decrements currentStep in state\n    let currentStep = this.state.currentStep;\n    currentStep = currentStep <= 1 ? 1 : currentStep - 1;\n    this.setState({\n      currentStep: currentStep\n    });\n  }\n\n  handleChange = event => {\n    // Changes state when something is typed in the inputs of the children step1 and step2\n    const { name, value } = event.target;\n    this.setState({\n      [name]: value\n    });\n  };\n\n  handleSubmit = event => {\n    // Function which sends a post request with user details to the server and calls the functions for resetting the\n    event.preventDefault(); // form and rendering the thank you message\n    const {\n      title,\n      name,\n      dateOfBirth,\n      location,\n      dateTime,\n      feedback\n    } = this.state;\n\n    let reqBody = {\n      title: title,\n      name: name,\n      dateOfBirth: dateOfBirth,\n      location: location,\n      dateTime: dateTime,\n      feedback: feedback\n    };\n\n    fetch(\"/user-form\", {\n      method: \"post\",\n      body: JSON.stringify(reqBody),\n      headers: { \"Content-Type\": \"application/json\" }\n    }).then(res => {\n      if (res.ok) {\n        return res.json();\n      } else {\n        throw new Error(\"Something went wrong with your fetch\");\n      }\n    });\n    this.notify();\n    this.handleReset();\n  };\n\n  handleReset = event => {\n    // Function to reset state on form submission\n    this.setState({\n      currentStep: 1,\n      title: \"\",\n      name: \"\",\n      dateOfBirth: \"\",\n      location: \"\",\n      dateTime: \"\",\n      feedback: \"\"\n    });\n  };\n\n  previousButton() {\n    // If the current step is 2 AND Step 2 fields are filled, then render the 'previous' and 'submit'\n    let currentStep = this.state.currentStep; // buttons\n    if (\n      currentStep !== 1 &&\n      this.state.location !== \"\" &&\n      this.state.dateTime !== \"\" &&\n      this.state.feedback !== \"\"\n    ) {\n      return (\n        <React.Fragment>\n          <button\n            className=\"btn btn-secondary\"\n            type=\"button\"\n            onClick={this.prev}\n          >\n            Previous\n          </button>\n          <button\n            className=\"btn btn-submit\"\n            type=\"button\"\n            onClick={this.handleSubmit}\n          >\n            Submit\n          </button>\n        </React.Fragment>\n      );\n    } else if (currentStep !== 1) {\n      return (\n        <button className=\"btn btn-secondary\" type=\"button\" onClick={this.prev}>\n          Previous\n        </button>\n      );\n    }\n    // ...else return nothing\n    return null;\n  }\n\n  nextButton() {\n    // If the current step is 1 AND filled in, render the 'next' button\n    let currentStep = this.state.currentStep;\n    if (\n      currentStep < 2 &&\n      this.state.title !== \"\" &&\n      this.state.name !== \"\" &&\n      this.state.dateOfBirth !== \"\"\n    ) {\n      return (\n        <button className=\"btn btn-primary\" type=\"button\" onClick={this.next}>\n          Next\n        </button>\n      );\n    }\n    return null;\n  }\n\n  render() {\n    // Markup for MainForm\n    return (\n      <React.Fragment>\n        <h1 className=\"heading\">Please fill in all fields to continue</h1>\n        <p className=\"smallText\">Part {this.state.currentStep} </p>\n\n        <form ref={this.step}>\n          <Step1\n            currentStep={this.state.currentStep} // Props to send to the child components\n            handleChange={this.handleChange}\n            title={this.state.title}\n            name={this.state.name}\n            dateOfBirth={this.state.dateOfBirth}\n          />\n          <Step2\n            currentStep={this.state.currentStep}\n            handleChange={this.handleChange}\n            location={this.state.location}\n            dateTime={this.state.dateTime}\n            feedback={this.state.feedback}\n          />\n          <div className=\"button-container\">\n            {this.previousButton()}\n            {this.nextButton()}\n            <ToastContainer position=\"bottom-right\" />\n          </div>\n        </form>\n      </React.Fragment>\n    );\n  }\n}\nexport default MainForm;\n","import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n// import \"./App.css\";\n\nimport MainForm from \"./components/MainForm\";\nimport Step1 from \"./components/Step1\";\nimport Step2 from \"./components/Step2\";\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <div>\n          <MainForm className=\"container\">\n            <Route exact path=\"/step1\" component={Step1} />\n            <Route exact path=\"/step2\" component={Step2} />\n          </MainForm>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n//import \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}